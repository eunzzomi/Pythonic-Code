#########선형대수학##########

vector_a = [1,2,10]
vector_b = (1,2,10) 
vector_c = {'x':1,'y':1, 'z':10}
#기본적으로 리스트를 벡터라고 봐야함. 





#vector 의 연산 - 권장하지 않음
u =[2,2]
v = [2,3]
z = [3,5]
result = []
for i in range(len(u)): 
    result.append(u[i]+v[i]+z[i])
    
print(result)



#vector 의 연산 - pythonic
u =[2,2]
v = [2,3]
z = [3,5]
result = [sum(t) for t in zip(u,v,z)]
print(result) 

u =[2,2]
v = [2,3]
alpha = 2
result = [alpha*sum(t) for t in zip(u,v)]
print(result) 



u =[2,2]
v = [2,3]
z = [3,5]

[t[0]*2-sum(t) for t in zip(u,v,z)]

#t[0] = u 값을 말함 . 






########matrix#############
#matrix representation of python 
matrix_a = [[3,6],[4,5]]
matrix_b = [(3,6), (4,5)]
matrix_c = {(0,0):3,(0,1):6,(1,0):4, (1,1):5}

#특히 dict 방식은 무궁무진 

#matrix addition
matrix_a = [[3,6],[4,5]]
matrix_b = [[3,6], [4,5]]

[ rows for rows in zip(matrix_a,matrix_b) #튜플로 묶어짐. zip 특성





[[element for element in zip(rows)] for rows in zip(matrix_a,matrix_b)]
[[v for v in zip(*rows)] for rows in zip(matrix_a, matrix_b)]
[[sum(v) for v in zip(*rows)] for rows in zip(matrix_a, matrix_b)]

#matrix transpose
matrix_a = [[1,2,3],[4,5,6]]

print([row for row in zip(*matrix_a)])

matrix_b = [list(row) for row in zip(*matrix_a)]
print(matrix_b)


[[value for value in row] for row in zip(*matrix_a)]


#matrix product 
matrix_a = [[1,1,3],[3,1,1]]
matrix_b = [[1,1],[2,1],[1,3]]

[ row_a for row_a in matrix_a]
[col_b for col_b in zip(*matrix_b)]

#열을 가져올땐 asterisk이용해서 zip해줘야함
#행은 그냥 가져와짐

[[[t for t in zip(row_a, col_b)] for col_b in zip(*matrix_b)] for row_a in matrix_a]
[[ [t for t in zip(row_a, col_b)]
  for col_b in zip(*matrix_b)] for row_a in matrix_a]
  
  
  
[[ [a*b for a,b in zip(row_a, col_b)]
  for col_b in zip(*matrix_b)] for row_a in matrix_a]
  
  
  [[sum([a*b for a,b in zip(row_a, col_b)])
  for col_b in zip(*matrix_b)] for row_a in matrix_a]
  
  
  
  

############linear algebra for python##########
#problem1 - vector size check
def vector_size_check(*vector_variables): 
    return all(len(vector_variables[0]) == x
               for x in [len(vector) for vector in vector_variables])

print(vector_size_check([1,3],[2,3],[6,7]))


# all : and 조건과 같다고 보면 됨. 안에 모두 true일경우 true를 반환. 
#any : or 조건과 같다고 보면 됨.

#다른 방법
def vector_size_check(*vector_variables): 
    return all(
        [len(vector_variables[0]) == len(vector)
               for vector in vector_variables[1:]])
               
               
               
               
               
               
               
#problem2 - vector addition 
def vector_addition(*vector_variables):
    if vector_size_check(*vector_variables) == False: 
        raise ArithmeticError
    return [sum(elements) for elements in zip(*vector_variables)]



result = ([1,3],[2,3])

#1
[sum(value) for value in zip(*result)]
#2
vector_addition(*result)




#problem3 - vector subtration
def vector_subtration(*vector_variables):
    if vector_size_check(*vector_variables) == False: 
        raise ArithmeticError
    return [elements[0]*2-sum(elements) for elements in zip(*vector_variables)]


vector_subtration(*result)



#problem4 - scalar vector product
def scalar_vector_product(alpha, vector_variables): 
    return [alpha*element for element in vector_variables]

print(scalar_vector_product(5,[1,2,3]))



#problem5 - matrix size check 
def matrix_size_check(*matrix_variables): 
    #print(matrix_variables)
    #print([matrix for matrix  in matrix_variables]) >> matrix 분해 
    
    # print([len(matrix) for matrix  in matrix_variables]) >> length 확인
    #print( len(set([len(matrix) for matrix  in matrix_variables]) ) ==1 ) #low가 1인지 확인 (set 해주면 둘이 같은 값이면 하나의 value이니까)
    
    #print( [len(matrix[0]) for matrix in matrix_variables]) #>> 각 매트릭스의 첫번째 행의 길이 확인 
    #print(len(set([len(matrix[0]) for matrix in matrix_variables])))  # 그 각 첫번째 행의 길이가 같은지 확인하기 위해 길이의 set이 1개의 값인지 확인
    
    #return len(set([len(matrix) for matrix  in matrix_variables]) ) ==1  and len(set([len(matrix[0]) for matrix in matrix_variables]))
    



matrix_x = [[2,5],[2,1]]
matrix_y = [[2,5],[2,1],[3,4]]

print(matrix_size_check(matrix_x, matrix_y))
    
    
    


#problem7 - matrix equal
def is_matrix_equal(*matrix_variables):
    return all([all([len(set(row))==1 for row in zip(*matrix)]) for matrix in zip(*matrix_variables)])
#각 행들을 zip 해와서 거기 각 성분의 set 으로 묶어서 성분이 하나인지 확인하는 것 
#set(len(variable)) 과 set(variable)은 다름 



matrix_x = [[2,5],[2,1]] 
matrix_y = [[2,5],[3,4]]

print(is_matrix_equal(matrix_x, matrix_y))


#problem8 - matrix addition 
def matrix_addition(*matrix_variables):
    if matrix_size_check(*matrix_variables) == False: 
        raise ArithmeticError
    return [[sum(row) for row  in zip(*matrix)] for matrix in zip(*matrix_variables)]
    #return [[sum(row) for row in zip(*matrix)] for matrix in zip(*matrix_variables)]
    
matrix_x = [[2,5],[2,1]] 
matrix_y = [[2,5],[3,4]]
print(matrix_addition(matrix_x, matrix_y))
    
#problem9 - matrix subtration
def matrix_subtration(*matrix_variables):
    if matrix_size_check(*matrix_variables) == False: 
        raise ArithmeticError
    return [[row[0]*2-sum(row) for row  in zip(*matrix)] for matrix in zip(*matrix_variables)]
    #return [[sum(row) for row in zip(*matrix)] for matrix in zip(*matrix_variables)]
    
matrix_x = [[2,5],[2,1]] 
matrix_y = [[2,5],[3,4]]
print(matrix_subtration(matrix_x, matrix_y))

#problem9 - matrix transpose
def matrix_transpose(matrix_variable): 
    #return [list(row) for row in zip(*matrix_variable)] # asterisk를 써서 행마다 있는 열성분끼리 묶어줌.
    #return [row for row in matrix_variable] #행만 가져옴
    #return [[element for element in row ] for row in zip(*matrix_variable)]

matrix_w = [[2,3],[4,5],[6,7]]
matrix_transpose(matrix_w)


#problem10 - scalar product
def scalar_matrix_product(alpha, matrix_variable): 
    return [scalar_vector_product(alpha, row) for row in matrix_variable]


#problem11 - is_product_availability_matrix 
def is_product_availability_matrix(matrix_a, matrix_b):
    return len([column_vector for column_vector in zip(*matrix_a)]) == len(matrix_b)



#product12 - mastrix product (위에랑 비슷, row랑 column곱만 해준다고 생각하면 됨. )
def matrix_product(matrix_a, matrix_b):
    return [[sum(a*b for a,b in zip(row_a, column_b)) for column_b in zip(*matrix_b)]
           for row_a in matrix_a]




